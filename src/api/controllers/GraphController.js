const {aggregateByCategoryByDate, aggregateTotal} = require('../lib/operations');
const {formatFromAggregateByCategoryAndDate, formatFromAggregateTotal} = require('../lib/grafana');

module.exports = {
  search,
  query,
  annotations,
};

function search(req, res) {
  res.send([
    {
      'target': 'upper_25',
      'datapoints': [
        [3.0, 1450754160], [2.0, 1450754220], [1.0, 1450754280], [0.0, 1450754340], [1.0, 1450754400], [1.0, 1450754460], [1.0, 1450754520], [1.0, 1450754580], [1.0, 1450754640], [1.0, 1450754700], [2.0, 1450754760], [1.0, 1450754820], [165.0, 1450754880], [5.0, 1450754940], [1.0, 1450755000], [1.0, 1450755060], [5.0, 1450755120], [2.0, 1450755180], [2.0, 1450755240], [1.0, 1450755300], [1.0, 1450755360], [7.0, 1450755420], [4.0, 1450755480], [1.0, 1450755540], [7.0, 1450755600], [7.0, 1450755660], [1.0, 1450755720], [2.0, 1450755780], [1.0, 1450755840], [1.0, 1450755900], [2.0, 1450755960], [1.0, 1450756020], [1.0, 1450756080], [2.0, 1450756140], [1.0, 1450756200], [7.0, 1450756260], [2.0, 1450756320], [2.0, 1450756380], [1.0, 1450756440], [8.0, 1450756500], [7.0, 1450756560], [1.0, 1450756620], [2.0, 1450756680], [2.0, 1450756740], [2.0, 1450756800], [2.0, 1450756860], [18.0, 1450756920], [1.0, 1450756980], [1.0, 1450757040], [1.0, 1450757100], [1.0, 1450757160], [6.0, 1450757220], [2.0, 1450757280], [1.0, 1450757340], [2.0, 1450757400], [2.0, 1450757460], [1.0, 1450757520], [1.0, 1450757580], [1.0, 1450757640], [1.0, 1450757700], [1.0, 1450757760], [1.0, 1450757820], [15.0, 1450757880], [5.0, 1450757940], [2.0, 1450758000], [1.0, 1450758060], [1.0, 1450758120], [1.0, 1450758180], [1.0, 1450758240], [1.0, 1450758300], [1.0, 1450758360], [1.0, 1450758420], [1.0, 1450758480], [1.0, 1450758540], [1.0, 1450758600], [2.0, 1450758660], [1.0, 1450758720], [2.0, 1450758780], [1.0, 1450758840], [1.0, 1450758900], [1.0, 1450758960], [1.0, 1450759020], [1.0, 1450759080], [1.0, 1450759140], [8.0, 1450759200], [1.0, 1450759260], [2.0, 1450759320], [1.0, 1450759380], [1.0, 1450759440], [1.0, 1450759500], [2.0, 1450759560], [2.0, 1450759620], [1.0, 1450759680], [1.0, 1450759740], [2.0, 1450759800], [1.0, 1450759860], [1.0, 1450759920], [1.0, 1450759980], [1.0, 1450760040], [2.0, 1450760100], [9.0, 1450760160], [1.0, 1450760220], [2.0, 1450760280], [1.0, 1450760340], [0.0, 1450760400], [1.0, 1450760460], [1.0, 1450760520], [1.0, 1450760580], [2.0, 1450760640], [1.0, 1450760700], [2.0, 1450760760], [1.0, 1450760820], [3.0, 1450760880], [3.0, 1450760940], [1.0, 1450761000], [1.0, 1450761060], [1.0, 1450761120], [1.0, 1450761180], [1.0, 1450761240], [1.0, 1450761300], [1.0, 1450761360], [1.0, 1450761420], [1.0, 1450761480], [1.0, 1450761540], [2.0, 1450761600], [1.0, 1450761660], [1.0, 1450761720], [1.0, 1450761780], [1.0, 1450761840], [1.0, 1450761900], [1.0, 1450761960], [2.0, 1450762020], [2.0, 1450762080], [1.0, 1450762140], [2.0, 1450762200], [1.0, 1450762260], [1.0, 1450762320], [8.0, 1450762380], [1.0, 1450762440], [2.0, 1450762500], [1.0, 1450762560], [2.0, 1450762620], [1.0, 1450762680], [1.0, 1450762740], [1.0, 1450762800], [1.0, 1450762860], [1.0, 1450762920], [1.0, 1450762980], [1.0, 1450763040], [1.0, 1450763100], [1.0, 1450763160], [1.0, 1450763220], [1.0, 1450763280], [2.0, 1450763340], [1.0, 1450763400], [1.0, 1450763460], [1.0, 1450763520], [1.0, 1450763580], [2.0, 1450763640], [1.0, 1450763700], [1.0, 1450763760], [2.0, 1450763820], [1.0, 1450763880], [1.0, 1450763940], [1.0, 1450764000], [1.0, 1450764060], [2.0, 1450764120], [2.0, 1450764180], [5.0, 1450764240], [2.0, 1450764300], [1.0, 1450764360], [2.0, 1450764420], [1.0, 1450764480], [2.0, 1450764540], [1.0, 1450764600], [2.0, 1450764660], [1.0, 1450764720], [1.0, 1450764780], [1.0, 1450764840], [2.0, 1450764900], [1.0, 1450764960], [1.0, 1450765020], [1.0, 1450765080], [1.0, 1450765140], [1.0, 1450765200], [1.0, 1450765260], [2.0, 1450765320], [1.0, 1450765380], [1.0, 1450765440], [1.0, 1450765500], [1.0, 1450765560], [1.0, 1450765620], [1.0, 1450765680], [1.0, 1450765740], [1.0, 1450765800], [1.0, 1450765860], [1.0, 1450765920], [1.0, 1450765980], [1.0, 1450766040], [1.0, 1450766100], [3.0, 1450766160], [1.0, 1450766220], [1.0, 1450766280], [18.0, 1450766340], [1.0, 1450766400]]
    }
  ]);

}

async function query(req, res, next) {
  try {
    const {range, targets} = req.body;
    let matches = {};
    const response = [];
    let targetsResponse = [];

    for(const i in targets) {
      const input = JSON.parse(targets[i].target);
      let type = 1;
      const target = {};

      if(input.type && input.type === 'total') {
        type = 2;
      }

      if(input && input.matches) {
        matches = input.matches;
      }

      if(type === 1) {
        const data = await aggregateByCategoryByDate(range.from, range.to, matches);
        target.datapoints = formatFromAggregateByCategoryAndDate(range.from, range.to, data);
      }

      if(type === 2) {
        const dataTotal = await aggregateTotal(range.from, range.to);
        target.datapoints = formatFromAggregateTotal(range.from, range.to, dataTotal, input.separated ? input.separated : false);
      }

      response.push(target);
    }

    for(const i in response) {
      targetsResponse = targetsResponse.concat(response[i].datapoints);
    }

    res.send(targetsResponse);

  } catch(e) {
    next(e);
  }
}

function annotations(req, res) {
  res.send();
}